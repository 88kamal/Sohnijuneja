var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import lineClamp from 'line-clamp';
export class InstagramFeed {
    constructor() {
        this.count = 8;
        this.even = false;
        this.captions = false;
        this.link = true;
        this.permalinks = false;
    }
    componentWillLoad() {
        this.fetchItems();
    }
    componentDidLoad() {
        if (!this.even) {
            this.resizeAllGridItems();
            window.addEventListener("resize", () => { this.resizeAllGridItems(); });
        }
    }
    componentDidUpdate() {
        if (!this.even) {
            setTimeout(() => { window.dispatchEvent(new Event('resize')); }, 100);
        }
    }
    resizeGridItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const grid = this.element.querySelector(".grid");
            const rowHeight = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-auto-rows'));
            const rowGap = parseInt(window.getComputedStyle(grid).getPropertyValue('grid-row-gap'));
            const rowSpan = Math.ceil((item.querySelector('.content').getBoundingClientRect().height + rowGap) / (rowHeight + rowGap));
            item.style.gridRowEnd = `span ${rowSpan}`;
        });
    }
    resizeAllGridItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const allItems = this.element.querySelectorAll(".item");
            for (let x = 0; x < allItems.length; x++) {
                this.resizeGridItem(allItems[x]);
            }
            this.clampCaptions();
        });
    }
    clampCaptions() {
        return __awaiter(this, void 0, void 0, function* () {
            const captions = this.element.querySelectorAll('.caption p');
            for (let i = 0; i < captions.length; ++i) {
                lineClamp(captions[i], 2);
            }
        });
    }
    url() {
        return `https://api.instagram.com/v1/users/${this.user}/media/recent/?access_token=${this.token}&count=${this.count}`;
    }
    fetchItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(this.url());
            const items = yield response.json();
            localStorage.setItem(`instagram-feed-${this.count}-${this.user}`, JSON.stringify(items));
            this.photos = items.data;
        });
    }
    renderCaptions(photo) {
        return (h("div", { class: "caption" },
            h("p", null, photo.caption.text)));
    }
    renderPhoto(photo) {
        const Tag = this.permalinks ? "a" : "div";
        // @ts-ignore
        return (h(Tag, { class: "item", href: photo.link, target: "_blank" },
            h("div", { class: "content" },
                h("smart-image", { preload: photo.images.thumbnail.url, width: photo.images.standard_resolution.width, height: photo.images.standard_resolution.height, square: this.even, fill: this.even },
                    h("source", { srcSet: photo.images.low_resolution.url, media: "(max-width: 600px)" }),
                    h("source", { srcSet: photo.images.standard_resolution.url, media: "(min-width: 600px)" })),
                this.captions && photo.caption && this.renderCaptions(photo))));
    }
    render() {
        return (h("div", null,
            h("div", { class: `grid ${this.even ? "even" : ""}` }, this.photos && this.photos.map((photo) => {
                return this.renderPhoto(photo);
            })),
            this.link &&
                h("div", { class: "view-more" },
                    h("a", { href: `https://instagram.com/${this.user}` }, "View more on Instagram"))));
    }
    static get is() { return "instagram-feed"; }
    static get properties() { return { "captions": { "type": Boolean, "attr": "captions" }, "count": { "type": Number, "attr": "count" }, "element": { "elementRef": true }, "even": { "type": Boolean, "attr": "even" }, "link": { "type": Boolean, "attr": "link" }, "permalinks": { "type": Boolean, "attr": "permalinks" }, "photos": { "state": true }, "token": { "type": String, "attr": "token" }, "user": { "type": String, "attr": "user" } }; }
    static get style() { return "/**style-placeholder:instagram-feed:**/"; }
}
