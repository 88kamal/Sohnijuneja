import { updateStyles } from '../../helpers';
export class SmartImage {
    constructor() {
        this.fill = false;
        this.square = false;
        this.bg = "transparent";
        this.sources = [];
        this.active = false;
    }
    componentWillLoad() {
        this.setBG();
        this.prepareSources();
        this.updateAspectRatio();
        this.updateOrientation();
    }
    componentDidLoad() {
        this.addIntersectionObserver();
        this.figure = this.element.shadowRoot.querySelector('figure');
    }
    handleImage() {
        this.active = true;
    }
    addIntersectionObserver() {
        if ('IntersectionObserver' in window) {
            this.io = new IntersectionObserver((data) => {
                if (data[0].isIntersecting) {
                    this.handleImage();
                    this.removeIntersectionObserver();
                }
            });
            this.io.observe(this.element.shadowRoot.querySelector('figure'));
        }
        else {
            setTimeout(() => {
                this.handleImage();
            }, 300);
        }
    }
    removeIntersectionObserver() {
        if (this.io) {
            this.io.disconnect();
            this.io = null;
        }
    }
    setBG() {
        updateStyles(this.element, {
            "--bg": `${this.bg}`
        });
    }
    prepareSources() {
        const sources = this.element.querySelectorAll("source");
        let sourcesArray = [];
        [].forEach.call(sources, (source) => {
            sourcesArray = [...sourcesArray, source];
        });
        this.sources = sourcesArray;
    }
    updateAspectRatio() {
        this.aspectRatio = (this.height / this.width) * 100;
        if (this.square) {
            updateStyles(this.element, {
                "--aspect_ratio": `100%`,
                "--width": `${this.width}px`,
                "--height": `${this.width}px`,
            });
        }
        else {
            updateStyles(this.element, {
                "--aspect_ratio": `${this.aspectRatio}%`,
                "--width": `${this.width}px`,
                "--height": `${this.height}px`,
            });
        }
    }
    updateOrientation() {
        if (this.width > this.height) {
            this.orientation = 'landscape';
        }
        else if (this.width < this.height) {
            this.orientation = 'portrait';
        }
        else {
            this.orientation = 'even';
        }
    }
    renderPicture() {
        if (this.active) {
            this.figure.classList.add('loaded');
            return [
                this.sources.map((source) => h("source", { srcSet: source.srcset, media: source.media })),
                h("img", { src: this.preload, class: `final_image ${this.orientation}` })
            ];
        }
    }
    render() {
        console.log(this.aspectRatio);
        return (h("figure", { itemtype: "http://schema.org/ImageObject", "data-fill": this.fill },
            h("div", { class: "overlay" }),
            h("picture", null, this.renderPicture()),
            h("img", { src: this.preload, class: `placeholder ${this.orientation}` })));
    }
    static get is() { return "smart-image"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return { "active": { "state": true }, "aspectRatio": { "state": true }, "bg": { "type": String, "attr": "bg" }, "element": { "elementRef": true }, "figure": { "state": true }, "fill": { "type": Boolean, "attr": "fill" }, "height": { "type": Number, "attr": "height" }, "io": { "state": true }, "orientation": { "state": true }, "preload": { "type": String, "attr": "preload" }, "sources": { "state": true }, "square": { "type": Boolean, "attr": "square" }, "width": { "type": Number, "attr": "width" } }; }
    static get style() { return "/**style-placeholder:smart-image:**/"; }
}
